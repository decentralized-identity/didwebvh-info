{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction to Trust DID Web","text":"<p>Trust DID Web (<code>did:tdw</code>) is an enhancement to the <code>did:web</code> DID method, providing complementary features that address <code>did:web</code>'s limitations. <code>did:tdw</code> features include:</p> <ul> <li>Ongoing publishing of all DID Document (DIDDoc) versions for a DID instead of,   or alongside a current <code>did:web</code> DID/DIDDoc.</li> <li>The same DID-to-HTTPS transformation as <code>did:web</code>.</li> <li>Supports the same High Assurance DIDs with DNS mechanism.</li> <li>The ability to resolve the full history of the DID using a verifiable chain of   updates to the DIDDoc from genesis to deactivation.</li> <li>A self-certifying identifier (SCID) for the DID. The SCID, globally unique and   embedded in the DID, is derived from the initial DID log entry. It ensures the integrity   of the DID's history mitigating the risk of attackers creating a new object with   the same identifier.</li> <li>An optional mechanism for enabling DID portability via the SCID, allowing   the DID's web location to be moved and the DID string to be updated, both while retaining   a connection to the predecessor DID(s) and preserving the DID's verifiable history.</li> <li>DIDDoc updates contain a proof signed by the DID Controllers authorized to   update the DID.</li> <li>An optional mechanism for publishing \"pre-rotation\" keys to prevent the loss of   control of a DID in cases where an active private key is compromised.</li> <li>An optional mechanism for having collaborating witnesses   that approve of updates to the DID by a DID Controller before publication.</li> <li>DID URL path handling that defaults (but can be overridden) to automatically   resolving <code>&lt;did&gt;/path/to/file</code> by using a comparable DID-to-HTTPS translation   as for the DIDDoc.</li> <li>A DID URL path <code>&lt;did&gt;/whois</code> that defaults to automatically returning (if   published by the [[ref: DID controller]]) a [[ref: Verifiable Presentation]]   containing [[ref: Verifiable Credentials]] with the DID as the   <code>credentialSubject</code>, signed by the DID. It draws inspiration from the   traditional WHOIS protocol [[spec:rfc3912]], offering an easy-to-use,   decentralized, trust registry.</li> </ul> <p>Combined, the additional features enable greater trust and security without compromising the simplicity of <code>did:web</code>.</p>"},{"location":"example/","title":"did:tdw DID Log Example","text":"<p>The following covers the evolution of a <code>did:tdw</code> from inception through several versions, showing the DID, DIDDoc, DID Log, and some of the intermediate data structures.</p> <p>The examples are aligned with version 0.4 of the <code>did:tdw</code> specification.</p> <p>In some of the following examples the data for the DID log entries is displayed as prettified JSON for readability. In the log itself, the JSON has all whitespace removed, and each line ends with a <code>CR</code>, per the JSON Lines convention.</p>"},{"location":"example/#did-creation-data","title":"DID Creation Data","text":"<p>These examples show the important structures used in the Create (Register) operation for a <code>did:tdw</code> DID.</p>"},{"location":"example/#input-to-the-scid-generation-process-with-placeholders","title":"Input to the SCID Generation Process with Placeholders","text":"<p>The following JSON is an example of the input that the DID Controller constructs and passes into the SCID Generation Process. In this example, the DIDDoc is particularly boring, containing the absolute minimum for a valid DIDDoc.</p> <p>This example includes both the initial \"authorized keys\" to sign the Data Integrity proof (<code>updateKeys</code>) and the pre-rotation commitment to the next authorization keys (<code>nextKeyHashes</code>). Both are in the <code>parameters</code> property in the log entry.</p> <pre><code>{\n  \"versionId\": \"{SCID}\",\n  \"versionTime\": \"2024-09-26T23:22:26Z\",\n  \"parameters\": {\n    \"prerotation\": true,\n    \"updateKeys\": [\n      \"z6MkhbNRN2Q9BaY9TvTc2K3izkhfVwgHiXL7VWZnTqxEvc3R\"\n    ],\n    \"nextKeyHashes\": [\n      \"QmXC3vvStVVzCBHRHGUsksGxn6BNmkdETXJGDBXwNSTL33\"\n    ],\n    \"method\": \"did:tdw:0.4\",\n    \"scid\": \"{SCID}\"\n  },\n  \"state\": {\n    \"@context\": [\n      \"https://www.w3.org/ns/did/v1\"\n    ],\n    \"id\": \"did:tdw:{SCID}:domain.example\"\n  }\n}\n</code></pre>"},{"location":"example/#output-of-the-scid-generation-process","title":"Output of the SCID Generation Process","text":"<p>After the SCID is generated, the literal <code>{SCID}</code> placeholders are replaced by the generated SCID value (see below). This JSON is the input to the <code>entryHash</code> generation process -- with the SCID <code>versionId``. Once the process has run, the version number of this first version of the DID (</code>1<code>), a dash</code>-<code>and the resulting output hash replace the [[ref: SCID as the</code>versionId` value.</p> <pre><code>{\n  \"versionId\": \"QmfGEUAcMpzo25kF2Rhn8L5FAXysfGnkzjwdKoNPi615XQ\",\n  \"versionTime\": \"2024-09-26T23:22:26Z\",\n  \"parameters\": {\n    \"prerotation\": true,\n    \"updateKeys\": [\n      \"z6MkhbNRN2Q9BaY9TvTc2K3izkhfVwgHiXL7VWZnTqxEvc3R\"\n    ],\n    \"nextKeyHashes\": [\n      \"QmXC3vvStVVzCBHRHGUsksGxn6BNmkdETXJGDBXwNSTL33\"\n    ],\n    \"method\": \"did:tdw:0.4\",\n    \"scid\": \"QmfGEUAcMpzo25kF2Rhn8L5FAXysfGnkzjwdKoNPi615XQ\"\n  },\n  \"state\": {\n    \"@context\": [\n      \"https://www.w3.org/ns/did/v1\"\n    ],\n    \"id\": \"did:tdw:QmfGEUAcMpzo25kF2Rhn8L5FAXysfGnkzjwdKoNPi615XQ:domain.example\"\n  }\n}\n</code></pre>"},{"location":"example/#data-integrity-proof-generation-and-first-log-entry","title":"Data Integrity Proof Generation and First Log Entry","text":"<p>The last step in the creation of the first log entry is the generation of the data integrity proof. One of the keys in the <code>updateKeys</code> [[ref: parameter MUST be the <code>verificationMethod</code> in the proof (in <code>did:key</code> form) to generate the signature across the post-entryHash processed DID log entry. The generated proof is added to the JSON Line and the log entry JSON object becomes the first entry in the [[ref: DID Log.</p> <p>The following is the JSON prettified version of the entry log file that is published as the initial <code>did.jsonl</code> file. When published, all extraneous whitespace is removed, as shown in the block below the pretty-printed version.</p> <pre><code>{\n  \"versionId\": \"1-QmQq6Kg4ZZ1p49znzxnWmes4LkkWgMWLrnrfPre8UD56bz\",\n  \"versionTime\": \"2024-09-26T23:22:26Z\",\n  \"parameters\": {\n    \"prerotation\": true,\n    \"updateKeys\": [\n      \"z6MkhbNRN2Q9BaY9TvTc2K3izkhfVwgHiXL7VWZnTqxEvc3R\"\n    ],\n    \"nextKeyHashes\": [\n      \"QmXC3vvStVVzCBHRHGUsksGxn6BNmkdETXJGDBXwNSTL33\"\n    ],\n    \"method\": \"did:tdw:0.4\",\n    \"scid\": \"QmfGEUAcMpzo25kF2Rhn8L5FAXysfGnkzjwdKoNPi615XQ\"\n  },\n  \"state\": {\n    \"@context\": [\n      \"https://www.w3.org/ns/did/v1\"\n    ],\n    \"id\": \"did:tdw:QmfGEUAcMpzo25kF2Rhn8L5FAXysfGnkzjwdKoNPi615XQ:domain.example\"\n  },\n  \"proof\": [\n    {\n      \"type\": \"DataIntegrityProof\",\n      \"cryptosuite\": \"eddsa-jcs-2022\",\n      \"verificationMethod\": \"did:key:z6MkhbNRN2Q9BaY9TvTc2K3izkhfVwgHiXL7VWZnTqxEvc3R#z6MkhbNRN2Q9BaY9TvTc2K3izkhfVwgHiXL7VWZnTqxEvc3R\",\n      \"created\": \"2024-09-26T23:22:26Z\",\n      \"proofPurpose\": \"authentication\",\n      \"proofValue\": \"z2fPF6fMewtV15kji2N432R7RjmmFs8p7MiSHSTM9FoVmJPtc3JUuZ472pZKoWgZDuT75EDwkGmZbK8ZKVF55pXvx\"\n    }\n  ]\n}\n</code></pre> <p>The same content \"un-prettified\", as it is found in the <code>did.jsonl</code> file:</p> <pre><code>{\"versionId\": \"1-QmQq6Kg4ZZ1p49znzxnWmes4LkkWgMWLrnrfPre8UD56bz\", \"versionTime\": \"2024-09-26T23:22:26Z\", \"parameters\": {\"prerotation\": true, \"updateKeys\": [\"z6MkhbNRN2Q9BaY9TvTc2K3izkhfVwgHiXL7VWZnTqxEvc3R\"], \"nextKeyHashes\": [\"QmXC3vvStVVzCBHRHGUsksGxn6BNmkdETXJGDBXwNSTL33\"], \"method\": \"did:tdw:0.4\", \"scid\": \"QmfGEUAcMpzo25kF2Rhn8L5FAXysfGnkzjwdKoNPi615XQ\"}, \"state\": {\"@context\": [\"https://www.w3.org/ns/did/v1\"], \"id\": \"did:tdw:QmfGEUAcMpzo25kF2Rhn8L5FAXysfGnkzjwdKoNPi615XQ:domain.example\"}, \"proof\": [{\"type\": \"DataIntegrityProof\", \"cryptosuite\": \"eddsa-jcs-2022\", \"verificationMethod\": \"did:key:z6MkhbNRN2Q9BaY9TvTc2K3izkhfVwgHiXL7VWZnTqxEvc3R#z6MkhbNRN2Q9BaY9TvTc2K3izkhfVwgHiXL7VWZnTqxEvc3R\", \"created\": \"2024-09-26T23:22:26Z\", \"proofPurpose\": \"authentication\", \"proofValue\": \"z2fPF6fMewtV15kji2N432R7RjmmFs8p7MiSHSTM9FoVmJPtc3JUuZ472pZKoWgZDuT75EDwkGmZbK8ZKVF55pXvx\"}]}\n</code></pre>"},{"location":"example/#didweb-version-of-diddoc","title":"<code>did:web</code> Version of DIDDoc","text":"<p>As noted in the publishing a parallel <code>did:web</code> DID section of this specification a <code>did:tdw</code> can be published by replacing <code>did:tdw</code> with <code>did:web</code> in the DIDDoc, adding an <code>alsoKnownAs</code> entry for the <code>did:tdw</code> and publishing the resulting DIDDoc at <code>did.json</code>, logically beside the <code>did.jsonl</code> file.</p> <p>Here is what the <code>did:web</code> DIDDoc looks like for the <code>did:tdw</code> above.</p> <pre><code>{\n    \"@context\": [\n      \"https://www.w3.org/ns/did/v1\"\n    ],\n    \"id\": \"did:web:domain.example\",\n    \"alsoKnownAs\": [\"did:tdw:QmfGEUAcMpzo25kF2Rhn8L5FAXysfGnkzjwdKoNPi615XQ:domain.example\"]\n}\n</code></pre>"},{"location":"example/#version-2-of-the-diddoc","title":"Version 2 of the DIDDoc","text":"<p>Time passes, and the DID Controller of the <code>did:tdw</code> DID decides to update its DID to a new version, version 2. In this case, the only change the DID Controller makes is transition the authorization key to the pre-rotation key.</p>"},{"location":"example/#version-2-entry-hashing-input","title":"Version 2 Entry Hashing Input","text":"<p>To generate a new version of the DID, the DID Controller needs to provide the updated <code>parameters</code>, and the new DIDDoc. The following processing is done to create the new DID log entry:</p> <ul> <li>The <code>versionId</code> from the previous (first) log entry is made the value   of the <code>versionId</code> in the new log entry.</li> <li>The <code>versionTime</code> in the new log entry is set to the current time.</li> <li>The <code>parameters</code> entry passed in is processed. In this case, since the <code>updateKeys</code> array is updated, and pre-rotation is active, the a verification is done to ensure that the hash of the <code>updateKeys</code> entries are found in the <code>nextKeyHashes</code> property from version 1 of the DID. As required by the <code>did:tdw</code> specification, a new <code>nextKeyHashes</code> is included in the new <code>parameters</code>.</li> <li>The new (but unchanged) DIDDoc is included in its entirety, as the value of the <code>state</code> property.</li> <li>The resultant JSON object is passed into the <code>entryHash</code> generation   process which outputs the   <code>entryHash</code> for this log entry. Once again, the <code>versionId</code> value is   replaced by the version number (the previous version number plus <code>1</code>, so <code>2</code>   in this case), a dash (<code>-</code>), and the new <code>entryHash</code>.</li> <li>The data integrity proof is generated added to the log   entry, spaces are removed, a <code>CR</code> character added (per JSON Lines)   and the entire entry is appended to the existing DID log file.</li> </ul> <p>The DID log file can now be published, optionally with an updated version of the corresponding <code>did:web</code> DID.</p> <p>The following is the JSON pretty-print log entry for the second version of an example <code>did:tdw</code>. Things to note in this example:</p> <ul> <li>The data integrity proof <code>verificationMethod</code> is the <code>did:key</code> from   the first log entry, since the <code>updateKeys</code> change in the second   log entry does not take affect until after the version update is   complete.</li> <li>A new <code>updateKeys</code> property in the <code>parameters</code> has been added, along with   commitment to a future key (<code>nextKeyHashes</code>) that will control future updates   to the DID.</li> </ul> <pre><code>{\n  \"versionId\": \"2-QmXL6CLK1BMHAd3zQMqkY49VSc9T3zhUcPxu6zEW176PfN\",\n  \"versionTime\": \"2024-09-26T23:22:26Z\",\n  \"parameters\": {\n    \"updateKeys\": [\n      \"z6MkvQnUuQn3s52dw4FF3T87sfaTvXRW7owE1QMvFwpag2Bf\"\n    ],\n    \"nextKeyHashes\": [\n      \"QmdA9fxQSLLwCQo6TkovcoaLgGYWq6Ttqx6A5D1RY13iFG\"\n    ]\n  },\n  \"state\": {\n    \"@context\": [\n      \"https://www.w3.org/ns/did/v1\"\n    ],\n    \"id\": \"did:tdw:QmfGEUAcMpzo25kF2Rhn8L5FAXysfGnkzjwdKoNPi615XQ:domain.example\"\n  },\n  \"proof\": [\n    {\n      \"type\": \"DataIntegrityProof\",\n      \"cryptosuite\": \"eddsa-jcs-2022\",\n      \"verificationMethod\": \"did:key:z6MkhbNRN2Q9BaY9TvTc2K3izkhfVwgHiXL7VWZnTqxEvc3R#z6MkhbNRN2Q9BaY9TvTc2K3izkhfVwgHiXL7VWZnTqxEvc3R\",\n      \"created\": \"2024-09-26T23:22:26Z\",\n      \"proofPurpose\": \"authentication\",\n      \"proofValue\": \"z2nkLj9rYAMG7TStpvihuo4HTovpC7uvWcDoYiGhoN8cqQuiwW2EnPZdWtid2FZAQDQPoaNkTooKVftGKDTh9p3Fy\"\n    }\n  ]\n}\n</code></pre>"},{"location":"example/#log-file-for-version-2","title":"Log File For Version 2","text":"<p>The new version 2 <code>did.jsonl</code> file contains two entries, one for each version of the DIDDoc -- as per the use of JSON Lines.</p> <pre><code>{\"versionId\": \"1-QmQq6Kg4ZZ1p49znzxnWmes4LkkWgMWLrnrfPre8UD56bz\", \"versionTime\": \"2024-09-26T23:22:26Z\", \"parameters\": {\"prerotation\": true, \"updateKeys\": [\"z6MkhbNRN2Q9BaY9TvTc2K3izkhfVwgHiXL7VWZnTqxEvc3R\"], \"nextKeyHashes\": [\"QmXC3vvStVVzCBHRHGUsksGxn6BNmkdETXJGDBXwNSTL33\"], \"method\": \"did:tdw:0.4\", \"scid\": \"QmfGEUAcMpzo25kF2Rhn8L5FAXysfGnkzjwdKoNPi615XQ\"}, \"state\": {\"@context\": [\"https://www.w3.org/ns/did/v1\"], \"id\": \"did:tdw:QmfGEUAcMpzo25kF2Rhn8L5FAXysfGnkzjwdKoNPi615XQ:domain.example\"}, \"proof\": [{\"type\": \"DataIntegrityProof\", \"cryptosuite\": \"eddsa-jcs-2022\", \"verificationMethod\": \"did:key:z6MkhbNRN2Q9BaY9TvTc2K3izkhfVwgHiXL7VWZnTqxEvc3R#z6MkhbNRN2Q9BaY9TvTc2K3izkhfVwgHiXL7VWZnTqxEvc3R\", \"created\": \"2024-09-26T23:22:26Z\", \"proofPurpose\": \"authentication\", \"proofValue\": \"z2fPF6fMewtV15kji2N432R7RjmmFs8p7MiSHSTM9FoVmJPtc3JUuZ472pZKoWgZDuT75EDwkGmZbK8ZKVF55pXvx\"}]}\n{\"versionId\": \"2-QmXL6CLK1BMHAd3zQMqkY49VSc9T3zhUcPxu6zEW176PfN\", \"versionTime\": \"2024-09-26T23:22:26Z\", \"parameters\": {\"updateKeys\": [\"z6MkvQnUuQn3s52dw4FF3T87sfaTvXRW7owE1QMvFwpag2Bf\"], \"nextKeyHashes\": [\"QmdA9fxQSLLwCQo6TkovcoaLgGYWq6Ttqx6A5D1RY13iFG\"]}, \"state\": {\"@context\": [\"https://www.w3.org/ns/did/v1\"], \"id\": \"did:tdw:QmfGEUAcMpzo25kF2Rhn8L5FAXysfGnkzjwdKoNPi615XQ:domain.example\"}, \"proof\": [{\"type\": \"DataIntegrityProof\", \"cryptosuite\": \"eddsa-jcs-2022\", \"verificationMethod\": \"did:key:z6MkhbNRN2Q9BaY9TvTc2K3izkhfVwgHiXL7VWZnTqxEvc3R#z6MkhbNRN2Q9BaY9TvTc2K3izkhfVwgHiXL7VWZnTqxEvc3R\", \"created\": \"2024-09-26T23:22:26Z\", \"proofPurpose\": \"authentication\", \"proofValue\": \"z2nkLj9rYAMG7TStpvihuo4HTovpC7uvWcDoYiGhoN8cqQuiwW2EnPZdWtid2FZAQDQPoaNkTooKVftGKDTh9p3Fy\"}]}\n</code></pre>"},{"location":"example/#log-file-for-version-3","title":"Log File For Version 3","text":"<p>The same process is repeated for version 3 of the DID. In this case:</p> <ul> <li>The DIDDoc is changed.</li> <li>an <code>authentication</code> method is added.</li> <li>two services are added.</li> <li>No changes are made to the authorized keys to update the DID. As a result, the <code>parameters</code> entry is empty (<code>{}</code>), and the parameters in effect from previous versions of the DID remain in effect.</li> </ul> <p>Here is the pretty-printed log entry:</p> <pre><code>{\n  \"versionId\": \"3-QmaSKJRACGefmi19LkS6TFj5FeMEfr98GpBWk7vEmbhT92\",\n  \"versionTime\": \"2024-09-26T23:22:26Z\",\n  \"parameters\": {},\n  \"state\": {\n    \"@context\": [\n      \"https://www.w3.org/ns/did/v1\",\n      \"https://w3id.org/security/multikey/v1\",\n      \"https://identity.foundation/.well-known/did-configuration/v1\",\n      \"https://identity.foundation/linked-vp/contexts/v1\"\n    ],\n    \"id\": \"did:tdw:QmfGEUAcMpzo25kF2Rhn8L5FAXysfGnkzjwdKoNPi615XQ:domain.example\",\n    \"authentication\": [\n      \"did:tdw:QmfGEUAcMpzo25kF2Rhn8L5FAXysfGnkzjwdKoNPi615XQ:domain.example#z6MkrgET7ZLV32qNrr6vUd2kVXGw63vbPvqxDqqhRQpvngBX\"\n    ],\n    \"assertionMethod\": [\n      \"did:tdw:QmfGEUAcMpzo25kF2Rhn8L5FAXysfGnkzjwdKoNPi615XQ:domain.example#z6MkrgET7ZLV32qNrr6vUd2kVXGw63vbPvqxDqqhRQpvngBX\"\n    ],\n    \"verificationMethod\": [\n      {\n        \"id\": \"did:tdw:QmfGEUAcMpzo25kF2Rhn8L5FAXysfGnkzjwdKoNPi615XQ:domain.example#z6MkrgET7ZLV32qNrr6vUd2kVXGw63vbPvqxDqqhRQpvngBX\",\n        \"controller\": \"did:tdw:QmfGEUAcMpzo25kF2Rhn8L5FAXysfGnkzjwdKoNPi615XQ:domain.example\",\n        \"type\": \"Multikey\",\n        \"publicKeyMultibase\": \"z6MkrgET7ZLV32qNrr6vUd2kVXGw63vbPvqxDqqhRQpvngBX\"\n      }\n    ],\n    \"service\": [\n      {\n        \"id\": \"did:tdw:QmfGEUAcMpzo25kF2Rhn8L5FAXysfGnkzjwdKoNPi615XQ:domain.example#domain\",\n        \"type\": \"LinkedDomains\",\n        \"serviceEndpoint\": \"https://domain.example\"\n      },\n      {\n        \"id\": \"did:tdw:QmfGEUAcMpzo25kF2Rhn8L5FAXysfGnkzjwdKoNPi615XQ:domain.example#whois\",\n        \"type\": \"LinkedVerifiablePresentation\",\n        \"serviceEndpoint\": \"https://domain.example/.well-known/whois.vc\"\n      }\n    ]\n  },\n  \"proof\": [\n    {\n      \"type\": \"DataIntegrityProof\",\n      \"cryptosuite\": \"eddsa-jcs-2022\",\n      \"verificationMethod\": \"did:key:z6MkvQnUuQn3s52dw4FF3T87sfaTvXRW7owE1QMvFwpag2Bf#z6MkvQnUuQn3s52dw4FF3T87sfaTvXRW7owE1QMvFwpag2Bf\",\n      \"created\": \"2024-09-26T23:22:26Z\",\n      \"proofPurpose\": \"authentication\",\n      \"proofValue\": \"z2V72e7bRFpjvphDcWfYeSDTLsbkoVU5SfWAKMwpxYAL74D8GugTuoB2vH93cJqb8XXz8tN4es9AM787CogcbmXKa\"\n    }\n  ]\n}\n</code></pre> <p>Here is the log entry for just version 3 of the DID.</p> <pre><code>{\"versionId\": \"3-QmaSKJRACGefmi19LkS6TFj5FeMEfr98GpBWk7vEmbhT92\", \"versionTime\": \"2024-09-26T23:22:26Z\", \"parameters\": {}, \"state\": {\"@context\": [\"https://www.w3.org/ns/did/v1\", \"https://w3id.org/security/multikey/v1\", \"https://identity.foundation/.well-known/did-configuration/v1\", \"https://identity.foundation/linked-vp/contexts/v1\"], \"id\": \"did:tdw:QmfGEUAcMpzo25kF2Rhn8L5FAXysfGnkzjwdKoNPi615XQ:domain.example\", \"authentication\": [\"did:tdw:QmfGEUAcMpzo25kF2Rhn8L5FAXysfGnkzjwdKoNPi615XQ:domain.example#z6MkrgET7ZLV32qNrr6vUd2kVXGw63vbPvqxDqqhRQpvngBX\"], \"assertionMethod\": [\"did:tdw:QmfGEUAcMpzo25kF2Rhn8L5FAXysfGnkzjwdKoNPi615XQ:domain.example#z6MkrgET7ZLV32qNrr6vUd2kVXGw63vbPvqxDqqhRQpvngBX\"], \"verificationMethod\": [{\"id\": \"did:tdw:QmfGEUAcMpzo25kF2Rhn8L5FAXysfGnkzjwdKoNPi615XQ:domain.example#z6MkrgET7ZLV32qNrr6vUd2kVXGw63vbPvqxDqqhRQpvngBX\", \"controller\": \"did:tdw:QmfGEUAcMpzo25kF2Rhn8L5FAXysfGnkzjwdKoNPi615XQ:domain.example\", \"type\": \"Multikey\", \"publicKeyMultibase\": \"z6MkrgET7ZLV32qNrr6vUd2kVXGw63vbPvqxDqqhRQpvngBX\"}], \"service\": [{\"id\": \"did:tdw:QmfGEUAcMpzo25kF2Rhn8L5FAXysfGnkzjwdKoNPi615XQ:domain.example#domain\", \"type\": \"LinkedDomains\", \"serviceEndpoint\": \"https://domain.example\"}, {\"id\": \"did:tdw:QmfGEUAcMpzo25kF2Rhn8L5FAXysfGnkzjwdKoNPi615XQ:domain.example#whois\", \"type\": \"LinkedVerifiablePresentation\", \"serviceEndpoint\": \"https://domain.example/.well-known/whois.vc\"}]}, \"proof\": [{\"type\": \"DataIntegrityProof\", \"cryptosuite\": \"eddsa-jcs-2022\", \"verificationMethod\": \"did:key:z6MkvQnUuQn3s52dw4FF3T87sfaTvXRW7owE1QMvFwpag2Bf#z6MkvQnUuQn3s52dw4FF3T87sfaTvXRW7owE1QMvFwpag2Bf\", \"created\": \"2024-09-26T23:22:26Z\", \"proofPurpose\": \"authentication\", \"proofValue\": \"z2V72e7bRFpjvphDcWfYeSDTLsbkoVU5SfWAKMwpxYAL74D8GugTuoB2vH93cJqb8XXz8tN4es9AM787CogcbmXKa\"}]}\n</code></pre> <p>And so on...</p>"},{"location":"implementations/","title":"Trust DID Web (did:tdw) Registrars/Resolvers","text":"<p>Proof of concept implementations of <code>did:tdw</code> software for DID Controller registrars and resolvers can be found here:</p> <ul> <li>Typescript</li> <li>Python</li> <li>Go</li> </ul> <p>The implementations support most of the features of the core <code>did:tdw</code> including key pre-rotation. The TypeScript implementation has an experimental implementation of the witnesses feature.</p>"},{"location":"implementers_guide/","title":"did:tdw Implementer's Guide","text":"<p>This guide covers non-normative information about Trust DID Web and some of it's features -- why the features are part of the spec, how to take advantage of them, and what is in the specification vs. what is left for an implementer has to worry about.</p> <p>Contributions to this guide are welcome. If you learn something about deploying did:tdw and want to share -- open an issue, or submit a pull request.</p>"},{"location":"implementers_guide/#using-pre-rotation-keys","title":"Using Pre-Rotation Keys","text":"<p>In an effort to prevent the loss of control over a decentralized identifier (DID) due to a compromised private key, pre-rotation keys are introduced. These commitments, made by the DID Controller, are declarations about the authorization keys that will be published in future versions of the DID log, without revealing the keys themselves.</p> <p>The primary goal of pre-rotation keys is to ensure that even if an attacker gains access to the current active key, they will not be able to take control of the DID. This safeguard is achieved because the attacker could not simply rotate to a key they generate and control. Rather, they would need to have also compromised the unpublished (and presumably securely stored) pre-rotation key in order to rotate the DID keys.</p> <p>The cost of having pre-rotation protection is a more complicated process to update the keys of a DID. The following are some considerations we have come across in thinking about how to use the pre-rotation feature. The feature adds a layer of key management complexity in return for the benefit.</p>"},{"location":"implementers_guide/#key-rotation-with-pre-rotation","title":"Key Rotation with Pre-Rotation","text":"<p>In using pre-rotation, a DID Controller should generate an \"active\" key for the DIDDoc that is accessible for \"production\" purposes (signing, decrypting), and generates the \"next key\" in an isolated location from production. This prevents both the \"active\" and \"next key\" from being compromised in the same intrusion attack. For example, if an intruder gets into your infrastructure and is able to extract all of your private keys both DID control keys would be lost. Thus, we expect the feature to be used as follows:</p> <ul> <li>The DID Controller creating the DID would request from an isolated   service the hash of the \"next key\" as defined in this specification. For   example, an entity might have the \"active\" DID/key hosted by one Cloud   Provider, and the \"next key\" by another, on the theory that an attacker might   get into one environment or another but not both.</li> <li>When a key rotation is to be done, two entries are put in the log, using the following steps by the DID Controller:</li> <li>Get the full key reference entry from the isolated service for the pre-rotation \"nextKey\".</li> <li>Locally generate a pre-rotation key hash for a new key that will soon become the \"active\" key.</li> <li>Add a DID log entry that includes the properties from the previous two steps, and signs the proof using an authorized key (that presumably it controls, though not required).<ol> <li>Although the DID log could be published now, it is probably best to hold off and publish it after adding a second, as described by the rest of the steps.</li> </ol> </li> <li>Get a new pre-rotation hash from the isolated service.</li> <li>Get the full key-rotation key reference for the pre-rotation hash created for the last DID log entry.</li> <li>Add a DID Log entry that includes the properties from the previous two step</li> <li>If the key rotated in the previous DID log entry was a/the      authorized key to make updates to the DID, call the isolated service to produce      the Data Integrity proof over the entry using the key the isolated      service controls.<ol> <li>This step is not needed if the active service has a key authorized to sign the DIDDoc update.</li> </ol> </li> <li>Publish the new DID log containing the two new entries.</li> </ul>"},{"location":"implementers_guide/#post-quantum-attacks","title":"Post Quantum Attacks","text":"<p>One of the potential benefits of this approach to pre-rotation is that it is \"post-quantum safe\". The idea is that in a post-quantum world, the availability of the published key and signatures may enable the calculation of the corresponding private key. Since the pre-rotation value is a hash of the <code>nextKey</code> and not the public key itself, a post-quantum attack would not compromise that key, and so a further rotation by the attacker would not be possible. If there was a (suspected) need to transition to using a quantum-safe key, the same process listed above would be used, but key reference and the pre-rotation hash added into the second DID log entry would presumably both be for quantum-safe keys.</p>"},{"location":"implementers_guide/#challenges-in-using-pre-rotation","title":"Challenges in Using Pre-Rotation","text":"<p>Key management is hard enough without having to maintain isolated key generation environments for creating keys for different purposes. Enabling connectivity between the key generation environments to enable automated key rotation while maintaining the key recovery environment as \"isolated\" is technically challenging.</p>"},{"location":"implementers_guide/#using-did-portability","title":"Using DID Portability","text":"<p>As noted in the DID Portability section of the specification, a <code>did:tdw</code> DID can be renamed (ported) by changing the <code>id</code> DID string in the DIDDoc to one that resolves to a different HTTPS URL, as long as the specified conditions are met.</p> <p>While the impact of the feature is in fact the creation of a new DID, we think there is significant value in some use cases for supporting the specified capability. Ideally, the HTTPS URL for the \"old\" DID is changed to a redirect to the new DID, allowing for a seamless, verifiable evolution of the DID.</p> <p>An interesting example use case is a DID that replaces an email address hosted by a particular service. The extra capabilities of having the identifier being a DID vs. an email address is compelling enough, allowing it to be used for a range of services beyond email. The portability benefit comes when the owner of the DID decides to move to a new service, taking their DID with them. The verifiable history carried over to the renamed DID hosted by the new service provides assurance to those who interacted with the old DID (through chats, emails, postings, etc.) that they are still engaging with the same entity, despite the DID renaming. Compare that with what happens today when you switch from one email provider to another, and you have to reach out to all your contacts to assure them that you changed providers.</p> <p>While portability is powerful, it must be used with care and only in use cases where the capability is specifically required. When used, both the pre-rotation and witnesses features of <code>did:tdw</code> SHOULD also be enabled.</p>"},{"location":"implementers_guide/#mergers-acquisitions-and-name-changes","title":"Mergers, Acquisitions and Name Changes","text":"<p>Organizations change over time and such changes often involve names changes. Name changes in turn trigger domain name changes, as organizations match their Web location with their names. Mergers, acquisitions, and simple name changes, all can cause an organization's \"known\" domain name to change, including the relinquishment of control over their previous domain name. When such changes occur, it is very unlikely that just because the organization's DIDs use the old domain name will prevent the changes. Thus the DIDs need to \"adapt\" to the new domain -- the domain name portion of the DID has to change. Ideally, the old location and domain can be retained and a web redirect used to resolve the old DID to the new, but even if that cannot be done, the ability to use the same SCID and retain the full history can be preserved.</p>"},{"location":"implementers_guide/#did-hosting-service-providers","title":"DID Hosting Service Providers","text":"<p>Consider being able to replace the current identifiers we are given (email addresses, phone numbers) with <code>did:tdw</code> DIDs. Comparable hosting platforms might publish our DIDs for us (ideally, with us in custody of our own private keys...). Those DIDs, with the inherent public keys can be used for many purposes -- encrypted email (hello PGP!), messaging, secure file sharing, and more.</p> <p>From time to time in that imagined future, we may want to move our DIDs from one hosting service to another, just as we move from one email or mobile provider to another. With DIDs that can move and retain the history, we can make such moves smoothly. Contacts will see the change, but also see that the history of the DID remains.</p>"},{"location":"implementers_guide/#challenges-in-moving-a-did","title":"Challenges in Moving a DID","text":"<p>While we see great value (and even a hard requirement) for being able to move a DID's web location, it does create challenges in aligning with the DID Core specification. These challenges are listed below.</p> <p>Moving a <code>did:tdw</code> is actually the (partial or complete) deactivation of the old DID and the creation of a new DID. The use of the SCID and the way it is generated is designed to prevent an attacker from being able to create a DID they control but with the same SCID as existing DID. Thus, \"finding\" a <code>did:tdw</code> with the same SCID implies the DIDs are the same. That can be verified by processing the DID Log.</p> <p>By retaining the incrementing of the <code>versionId</code> after a move, the \"new\" DID does not start at <code>versionId</code> of <code>1</code>. Further, resolving <code>&lt;new-did&gt;?versionId=1</code> is going to return a DIDDoc with the top-level <code>id</code> equal to the <code>&lt;old-did&gt;</code>. This is useful from a business perspective, but unexpected from a DID Core perspective.</p>"},{"location":"implementers_guide/#using-high-assurance-dids-with-dns","title":"Using High Assurance DIDs with DNS","text":"<p>The [High Assurance DIDs with DNS] mechanism that can be used with <code>did:web</code> applies equally well with <code>did:tdw</code>.  A DID Controller publishing a <code>did:tdw</code> could use the mechanisms defined in the [High Assurance DIDs with DNS] specification despite <code>did:tdw</code> DIDs not (yet) being explicitly called out in the [High Assurance DIDs with DNS] specification. In particular, as <code>did:tdw</code> uses the same DID-to-HTTP transformation, publishing the expected DNS Domain records, and adding the required verification method and Data Integrity proof to their DIDDoc is done as defined in the [High Assurance DIDs with DNS] specification. Likewise, a resolver can include code to check to see if the DID Controller published the [High Assurance DIDs with DNS] specification DNS records and use those to further verify the DID.</p> <p>Alternatively, since <code>did:tdw</code> is not mentioned in the [High Assurance DIDs with DNS] specification, a <code>did:tdw</code> DID Controller could use the \"not <code>did:web</code>\" technique described in that specification and include a <code>dnsValidationDomain</code> entry in the DIDDoc to explicitly denote where to find the DNS records to use in binding the DID to the DNS domain. This technique could also be used with <code>did:tdw</code> (and <code>did:web</code> for that matter) if the DID is published on a platform (such as GitHub) and the controller wants to bind it to its DNS domain.</p>"},{"location":"implementers_guide/#future-possibilities","title":"Future Possibilities","text":"<p>In the future, as <code>did:tdw</code> becomes more accepted, we would like to see <code>did:tdw</code> explicitly added to the [High Assurance DIDs with DNS] specification beside <code>did:web</code>.</p> <p>Since <code>did:tdw</code> and the [High Assurance DIDs with DNS] specification both have the goal of adding methods for additional verifications of the DID, the support for <code>did:tdw</code> in the [High Assurance DIDs with DNS] could be more specific to the DID Method. For example, the key in the DNS record could be a required <code>did:tdw</code> witness, with its Data Integrity proof being a part of the DID log entry rather than in the DIDDoc itself.</p>"},{"location":"implementers_guide/#witnesses","title":"Witnesses","text":"<p>The term \"witness\" is often used in the decentralized trust space to refer to participants in an ecosystem that oversee the evolution of an identifier according to some ecosystem-specific governance framework. The goal is for a witness to collect, verify and approve data about the identifier and share it with others that trust the witness so they don't need to do that work themselves. The extra participants are intended to identify both malicious attackers of the identifier, and malicious use of the identifier by the DID Controller.</p> <p>Witnesses play an explicit function in <code>did:tdw</code>. When used by a DID Controller, witnesses (themselves identified by DIDs) are sent pending DID log entries prepared by the DID Controller. The witnesses verify the log entry using their copy of the \"current state\" of the DID, and then \"approve\" the update, according to the governance they use to define what \"approval\" means. For example, a [[ref: witness might interact with another party (perhaps even a person) to confirm that the DID Controller created the log entry. Once the [[ref: witness has both verified and approved the change, they express that approval by creating a Data Integrity proof that is chained to the data integrity proof created by the DID Controller, and send the proof back to the DID Controller. Once the number of data integrity proofs received by the DID Controller from the witnesses has exceeded a threshold, the DID Controller adds those proofs to their own data integrity proof in the log entry. Next, the DID Controller adds the log entry to the DID log and publishes the updated DIDDoc. A DID Controller relying on witnesses cannot independently publish an update to their DID -- they must get and publish the witness approval proofs.</p> <p>The application of witnesses is very much dependent on the governance of the ecosystem. Such governance is outside the scope of the <code>did:tdw</code> specification, and up to those deploying <code>did:tdw</code> DIDs. Hence, a DID Controller that controls a series of DIDs and uses those DIDs as [[ref: witnesses adds no additional trust or security to a DID if no properly defined governance is in place. In particular, in order for witnesses to add security and trust to a DID requires the members of an ecosystem to agree to the defined governance. A witness could be an \"endorser\" of a set of DIDs that are part of an ecosystem, with the act of witnessing the updates conveying through their approval that the DIDs are a legitimate participant in the ecosystem. Witnesses can also be used as a form of \"two-factor authentication\" of a change, such as having a public key published as a DNS record used as a witness for the DID. Such an addition means that an attacker would need to compromise both the web-publishing infrastructure of the DID Controller (where they publish the DID's <code>did.jsonl</code> file) as well as its DNS entry.</p> <p><code>did:tdw</code> witnesses have been specified to be simple to implement and use. Their power and effectiveness will come in how they are deployed within specific, governed ecosystems.</p>"},{"location":"overview/","title":"Overview","text":"<p>The emergence of Decentralized Identifiers (DIDs) and with them the evolution of DID Methods continues to be a dynamic area of development in the quest for trusted, secure and private digital identity management where the users are in control of their own data.</p> <p>The <code>did:web</code> method leverages the Domain Name System (DNS) to perform the DID operations. This approach is praised for its simplicity and ease of deployment, including DID-to-HTTPS transformation and addressing some aspects of trust by allowing for DIDs to be associated with a domain's reputation or published on platforms such as GitHub. However, it is not without its challenges-- from trust layers inherited from the web and the absence of a verifiable history for the DID.</p> <p>Tackling these concerns, the proposed <code>did:tdw</code> (Trust DID Web) method aims to enhance <code>did:web</code> by introducing features such as a self-certifying identifiers (SCIDs), update key(s) and a verifiable history, akin to what is available with ledger-based DIDs, but without relying on a ledger.</p> <p>This approach not only maintains backward compatibility with <code>did:web</code> but also offers an additional layer of assurance for those requiring more robust verification processes. By publishing the resulting DID as both <code>did:web</code> and <code>did:tdw</code>, it caters to a broader range of trust requirements, from those who are comfortable with the existing <code>did:web</code> infrastructure to those seeking greater security assurances provided by <code>did:tdw</code>. This innovative step represents a significant stride towards a more trusted and secure web, where the integrity of cryptographic key publishing is paramount.</p> <p>The key differences between <code>did:web</code> and <code>did:tdw</code> revolve around the core issues of decentralization and security. <code>did:web</code> is recognized for its simplicity and cost-effectiveness, allowing for easy establishment of a credential ecosystem. However, it is not inherently decentralized as it relies on DNS domain names, which require centralized registries. Furthermore, it lacks a cryptographically verifiable, tamper-resistant, and persistently stored DID document. In contrast, <code>did:tdw</code> is proposed as an enhancement to <code>did:web</code>, aiming to address these limitations by adding a verifiable history to the DID without the need for a ledger. This method seeks to provide a more decentralized approach by ensuring that the security of the embedded SCID does not depend on DNS. Additionally, <code>did:tdw</code> is capable of resolving a cryptographically verifiable trust registry and status lists, using DID-Linked Resources, which <code>did:web</code> lacks. These features are designed to build a trusted web, offering a higher level of assurance for cryptographic key publishing and management.</p> <p>For backwards compatibility, and for verifiers that \"trust\" <code>did:web</code>, a <code>did:tdw</code> can be trivially modified and published in parallel to a <code>did:web</code> DID. For resolvers that want more assurance, <code>did:tdw</code> provides a way to \"trust did:web\" (or to enable a \"trusted web\" if you say it fast) enabled by the features listed in the introduction.</p> <p>The following is a <code>tl;dr</code> summary of how <code>did:tdw</code> works:</p> <ol> <li><code>did:tdw</code> uses the same DID-to-HTTPS transformation as <code>did:web</code>, so    <code>did:tdw</code>'s  <code>did.jsonl</code> (JSON Lines) file is found in the same    location as <code>did:web</code>'s <code>did.json</code> file, and supports an easy transition    from <code>did:web</code> to gain the added benefits of <code>did:tdw</code>.</li> <li>The <code>did.jsonl</code> is a list of JSON DID log entries, one per line,    whitespace removed (per JSON Lines). Each entry contains the    information needed to derive a version of the DIDDoc from its preceding    version. The <code>did.jsonl</code> is also referred to as the DID Log.</li> <li>Each DID log entry is a JSON object containing the following properties:<ol> <li><code>versionId</code> -- a value that combines the version number    (starting at <code>1</code> and incremented by one per version), a literal dash    <code>-</code>, and a hash of the entry. The entry hash calculation links each entry    to its predecessor in a ledger-like chain.</li> <li><code>versionTime</code> -- as asserted by the DID Controller.</li> <li><code>parameters</code> -- a set of parameters that impact the processing of the current and   future log entries.<ul> <li>Example parameters are the version of the <code>did:tdw</code> specification and hash algorithm being used as well as the SCID and update key(s).</li> </ul> </li> <li><code>state</code> -- the new version of the DIDDoc.</li> <li>A Data Integrity (DI) proof across the entry, signed by a [[ref:   DID Controller authorized key to update the DIDDoc, and optionally,   a set of witnesses that monitor the actions of the DID Controller.</li> </ol> </li> <li>In generating the first version of the DIDDoc, the DID   Controller calculates the SCID for the DID from the first [[ref:   log entry (which includes the DIDDoc) by using the string   <code>\"{SCID}\"</code> everywhere the actual SCID is to be placed. The DID   Controller then replaces the placeholders with the calculated SCID,   including it as a <code>parameter</code> in the first log entry, and inserting   it where needed in the initial (and all subsequent) DIDDocs. The SCID   enables an optional portability capability, allowing a DID's web   location to be moved, while retaining the DID and version history of the DID.</li> <li>A DID Controller generates and publishes the new/updated DID Log file by making it   available at the appropriate location on the web, based on the identifier of the   DID.</li> <li>Given a <code>did:tdw</code> DID, a resolver converts the DID to an HTTPS URL,   retrieves, and processes the DID Log <code>did.jsonl</code>, generating and verifying   each log entry as per the requirements outlined in this specification.<ul> <li>In the process, the resolver collects all the DIDDoc versions and public   keys used by the DID currently, or in the past. This enables   resolving both current and past versions of the DID.</li> </ul> </li> <li><code>did:tdw</code> DID URLs with paths and <code>/whois</code> are resolved to documents   published by the DID Controller that are by default in the web location relative to the   <code>did.jsonl</code> file. See did/whois for more about the    powerful use cases enabled by the <code>/whois</code> DID URL path.</li> <li>Optionally, a DID Controller can easily generate and publish a <code>did:web</code> DIDDoc   from the latest <code>did:tdw</code> DIDDoc in parallel with the <code>did:tdw</code> DID Log.</li> </ol> <p>::: warning     A resolver settling for just the <code>did:web</code> version of the DID does not get the     verifiability of the <code>did:tdw</code> log.   :::</p> <p>An example of a <code>did:tdw</code> evolving through a series of versions can be seen in the did:tdw Examples included on this site.</p> <p>The specification was developed in parallel with the development of two proof of concept implementations. The specification/implementation interplay helped immensely in defining a practical, intuitive, straightforward, DID method. The existing proof of concept implementations of the <code>did:tdw</code> DID Method are listed in the Implementers Guide. The current implementations range from around 1500 to 2000 lines of code.</p>"},{"location":"root_CODE_OF_CONDUCT/","title":"Code of Conduct","text":"<p>We are committed to providing a friendly, safe and welcoming environment for all, regardless of the level of experience, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality, or other similar characteristics.</p> <p>Examples of behavior that contributes to creating a positive environment include: - Being kind and courteous to others - Using welcoming and inclusive language - Being respectful of differing viewpoints and experiences - Collaborating with other community members - Gracefully accepting constructive criticism - Focusing on what is best for the community - Showing empathy towards other community members</p> <p>Examples of unacceptable behavior by participants include: - The use of sexualized language or imagery and sexual attention or advances - The use of inappropriate images, including in a community member's avatar - The use of inappropriate language, including in a community member's nickname - Any spamming, flaming, baiting, or other attention-stealing behavior - Trolling, insulting/derogatory comments, and personal or political attacks - Public or private harassment - Publishing others' private information, such as a physical or electronic address, without explicit permission - Discussing topics that are overly polarizing, sensitive, or incite arguments. This includes the discussion of polarizing political views, violence, suicide, and rape. - Responding with \u201cRTFM\u201d, \"just google it\u201d or similar phrases in response to help requests - Other conduct which could reasonably be considered inappropriate</p>"},{"location":"root_CODE_OF_CONDUCT/#our-goals","title":"Our Goals","text":"<p>The goal of this document is to set the overall tone for our community. This isn\u2019t an exhaustive list of things you can and can't do. Rather, take this document in the spirit in which it\u2019s intended, and try to be your best self. We value many things beyond technical expertise, including collaboration and supporting others within our community. Providing a positive experience for other community members can have a much more significant impact than simply providing the correct answer.</p>"},{"location":"root_CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies to all spaces within the Trust DID Web community. This includes, but is not limited to, the Discord server, our repositories on GitHub, and meet-ups. In addition, violations of this code outside these spaces may affect a person's ability to participate within them.</p> <p>The Code of Conduct applies equally to all members of the community, including staff.</p>"},{"location":"root_CODE_OF_CONDUCT/#code-of-conduct-policies","title":"Code of Conduct Policies","text":""},{"location":"root_CODE_OF_CONDUCT/#moderation-policies","title":"Moderation Policies","text":"<p>These are the policies for upholding our community\u2019s rules and the code of conduct. If you want to report a situation that needs to be reviewed by our team, please see our reporting guide below.</p>"},{"location":"root_CODE_OF_CONDUCT/#reporting-guide","title":"Reporting Guide","text":"<p>Instances of behaviors that violate the Code of Conduct or rules may be reported by any member of the community. Community members are encouraged to report these situations, including situations they witness involving other community members. You may report in the following ways: * By tagging @swcurran on the Discord server in situations that require immediate attention. * By sending a direct message (DM) to the Decentralized Identity Foundation Executive Director kimdhamilton.</p>"},{"location":"root_CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct and parts of the policies are adapted from the Adafruit Community Code of Conduct and Django Code of Conduct</p>"},{"location":"root_CONTRIBUTOR/","title":"DIF Contributor Agreement","text":"<p>By contributing to any discussion, code, issues, pull requests, or other forms of contribution to this repository and in all other DIF mediums where discussion, development, and collaboration on its contents are taking place, your contributions are bound by DIF's standard license and attribution selections, as detailed below:</p>"},{"location":"root_CONTRIBUTOR/#copyright-policy","title":"Copyright Policy","text":"<p>The copyright mode for all materials and content associated with this repository and development initiative are licensed under Creative Commons Attribution 4.0.</p>"},{"location":"root_CONTRIBUTOR/#source-code","title":"Source Code","text":"<p>Source code contributions are subject to the Developer Certificate of Origin version 1.1, available at http://developercertificate.org/, and all code is subject to the Apache 2.0 license, available at http://www.apache.org/licenses/LICENSE-2.0.html.</p>"},{"location":"root_CONTRIBUTOR/#patent-licensing","title":"Patent Licensing","text":"<p>The patent mode for all code, materials, and content in this repo, and associated with  development of this initiative, are licensed under the W3C's Patent Policy, as detailed below:</p> <ol> <li> <p>Licensing Commitment.  Each contributor agrees to make available any of its Essential Claims, as defined in the W3C Patent Policy (available at http://www.w3.org/Consortium/Patent-Policy-20040205), under the W3C RF licensing requirements Section 5 (http://www.w3.org/Consortium/Patent-Policy-20040205), as if the contribution was contained in or associated with a W3C Recommendation.</p> </li> <li> <p>For Exclusion.  Prior to committing any code, bug reports, pull requests, or other forms of contribution, a contributor may exclude Essential Claims from its licensing commitments under this agreement by providing written notice of that intent to DIF's Executive Director (and must received confirmation of receipt for the exclusion to have effect).  The Exclusion Notice for issued patents and published applications must include the patent number(s) or title and application number(s), as the case may be, for each of the issued patent(s) or pending patent application(s) that the contributor wishes to exclude from the licensing commitment set forth in Section 1 of this patent policy.  If an issued patent or pending patent application that may contain Essential Claims is not set forth in the Exclusion Notice, those Essential Claims shall continue to be subject to the licensing commitments under this agreement.  The Exclusion Notice for unpublished patent applications must provide either: (i) the text of the filed application; or (ii) identification of the specific part(s) of the contribution whose implementation makes the excluded claim an Essential Claim.  If (ii) is chosen, the effect of the exclusion will be limited to the identified part(s) of the contribution.  DIF's Executive Director will publish Exclusion Notices.</p> </li> </ol>"},{"location":"root_README/","title":"Trust DID Web - Information","text":"<p>This is the information site/repository for the Trust DID Web (<code>did:tdw</code>) DID Method.</p> <p><code>did:tdw</code> information is published at https://didtdw.org</p> <p>The <code>did:tdw</code> specification is published at https://identity.foundation/trustdidweb</p>"},{"location":"root_README/#contributing","title":"Contributing","text":"<p>Contributions to this information site are welcome! Feel free to improve the content found here about the DID Method:</p> <ul> <li>talk about what you have done with <code>did:tdw</code>,</li> <li>share information about the <code>did:tdw</code> software you have written,</li> <li>tell us about the services you offer in deploying <code>did:tdw</code>, or</li> <li>anything else you can think of about <code>did:tdw</code>.</li> </ul> <p>The <code>did:tdw</code> information site is a MkDocs Material site generated from the Markdown files in the site's GitHub repository.</p> <p>Contributions can be mode via pull requests (PRs) to the GitHub repository that will be reviewed and (if relevant) merged. You can use the GitHub website itself to add or edit files, or fork the repo and edit them in your favorite GitHub-friendly editor.  Each commit of a PR must have a DCO (Developer Certificate of Origin - https://github.com/apps/dco) sign-off -- handled automagically on the GitHub website or, if done from the command line, by adding the <code>-s</code> (lower case) option on the <code>git commit</code> command (e.g., <code>git commit -s -m \"Comment about the commit\"</code>).</p> <p>If you are running locally and want to test your changes before creating your pull request, you must install and run <code>mkdocs</code>. Guidance for that can be found in the MkDocs Material documentation. Once it is installed, run <code>mkdocs</code> from the root folder and open your browser to the indicated site.</p>"},{"location":"specification/","title":"Trust DID Web (did:tdw) Specification","text":"<p>Here is a live version of the <code>did:tdw</code> specification. You probably want to open up a new browser window to see the published spec, but if you just want to scan some things -- here you go!</p>"},{"location":"trustdidweb-server/","title":"Trust DID Web Server","text":""},{"location":"trustdidweb-server/#a-web-server-component-for-a-tdw-implementation","title":"A Web Server component for a TDW implementation","text":"<p>This server is built with the FastAPI framework.</p> <p>The TDW spec: https://identity.foundation/trustdidweb</p>"},{"location":"trustdidweb-server/#abstract","title":"Abstract","text":"<p>This server is for issuing clients to deposit their did documents, did logs and other objects.</p> <p>Having a seperate server to deposit verification material will ensure that signing material is isolated and provide a more secured architecture.</p> <p>This also enables system architects to create rigid governance rules around publishing DID documents and related ressources through endorsment.</p>"},{"location":"trustdidweb-server/#how-it-works","title":"How it works","text":"<p>For a demonstration, please see the demo directory</p> <ul> <li>An issuer requests an identifier location from the server.<ul> <li>The server returns a configuration if the location is available.</li> </ul> </li> <li>The issuer generates a verification method and signs a did document with it.<ul> <li>Using the provided proof configuration from the server.</li> </ul> </li> <li>The issuer request an endorser signature.<ul> <li>Using the provided proof configuration from the server.</li> </ul> </li> <li>The issuer sends this request back to the server.</li> </ul>"},{"location":"trustdidweb-server/#registering-a-new-did","title":"Registering a new DID","text":"<pre><code>sequenceDiagram\n    participant Trust DID Web Server\n    participant Issuer Client\n    participant Endorser Agent\n    Issuer Client-&gt;&gt;Trust DID Web Server: Request an identifier namespace.\n    Trust DID Web Server-&gt;&gt;Issuer Client: Provide a DID document and a proof configuration.\n    Issuer Client-&gt;&gt;Issuer Client: Create new verification method.\n    Issuer Client-&gt;&gt;Issuer Client: Sign DID document.\n    Issuer Client-&gt;&gt;Endorser Agent: Request endorser signature.\n    Endorser Agent-&gt;&gt;Endorser Agent: Verify and sign DID document.\n    Endorser Agent-&gt;&gt;Issuer Client: Return endorsed DID document.\n    Issuer Client-&gt;&gt;Trust DID Web Server: Send endorsed DID document.\n    Trust DID Web Server-&gt;&gt;Trust DID Web Server: Verify endorsed DID document.</code></pre>"},{"location":"trustdidweb-server/#roadmap","title":"Roadmap","text":"<ul> <li>DID log support</li> <li>whois VP support</li> <li>AnonCreds objects support</li> <li>Status lists support</li> </ul> <pre><code>In a web where trust is born anew,\nDecentralized keys unlock our view.\nWe shape the code, and break the chain,\nTrust in our hands will always reign.\n</code></pre>"},{"location":"version/","title":"Release Notes","text":""},{"location":"version/#didtdw-version-changelog","title":"<code>did:tdw</code> Version Changelog","text":"<p>The following lists the substantive changes in each version of the specification, as included in the specification.</p>"},{"location":"whois/","title":"The <code>/whois</code> Use Case","text":"<p>This DID Method introduces what we hope will be a widely embraced convention for all DID Methods -- the <code>/whois</code> path. This feature harkens back to the <code>WHOIS</code> protocol that was created in the 1970s to provide a directory about people and entities in the early days of ARPANET. In the 80's, <code>whois</code> evolved into RFC920 that has expanded into the global whois feature we know today as RFC3912. Submit a <code>whois</code> request about a domain name, and get back the information published about that domain.</p> <p>We propose that the <code>/whois</code> path for a DID enable a comparable, decentralized, version of the <code>WHOIS</code> protocol for DIDs. Notably, when <code>&lt;did&gt;/whois</code> is resolved (using a standard DID <code>service</code> that follows the Linked-VP specification), a Verifiable Presentation (VP) may be returned (if published by the DID Controller) containing Verifiable Credentials with the DID as the <code>credentialSubject</code>, and the VP signed by the DID. Given a DID, one can gather verifiable data about the DID Controller by resolving <code>&lt;did&gt;/whois</code> and processing the returned VP. That's powerful -- an efficient, highly decentralized, trust registry. For <code>did:tdw</code>, the approach is very simple -- transform the DID to its HTTPS equivalent, and execute a <code>GET &lt;https&gt;/whois</code>. Need to know who issued the VCs in the VP? Get the issuer DIDs from those VCs, and resolve <code>&lt;issuer did&gt;/whois</code> for each. This is comparable to walking a CA (Certificate Authority) hierarchy, but self-managed by the DID Controllers -- and the issuers that attest to them.</p> <p>The following is a use case for the <code>/whois</code> capability. Consider an example of the <code>did:tdw</code> controller being a mining company that has exported a shipment and created a \"Product Passport\" Verifiable Credential with information about the shipment. A country importing the shipment (the Importer) might want to know more about the issuer of the VC, and hence, the details of the shipment. They resolve the <code>&lt;did&gt;/whois</code> of the entity and get back a Verifiable Presentation about that DID. It might contain:</p> <ul> <li>A verifiable credential issued by the Legal Entity Registrar for the   jurisdiction in which the mining company is headquartered.</li> <li>Since the Importer knows about the Legal Entity Registrar, they can automate     this lookup to get more information about the company from the VC -- its     legal name, when it was registered, contact information, etc.</li> <li>A verifiable credential for a \"Mining Permit\" issued by the mining authority   for the jurisdiction in which the company operates.</li> <li>Perhaps the Importer does not know about the mining authority for that     jurisdiction. The Importer can repeat the <code>/whois</code> resolution process for     the issuer of that credential. The Importer might (for example), resolve     and verify the <code>did:tdw</code> DID for the Authority, and then resolve the     <code>/whois</code> DID URL to find a verifiable credential issued by the government of     the jurisdiction. The Importer recognizes and trusts that government's     authority, and so can decide to recognize and trust the mining permit     authority.</li> <li>A verifiable credential about the auditing of the mining practices of the   mining company. Again, the Importer doesn't know about the issuer of the audit   VC, so they resolve the <code>/whois</code> for the DID of the issuer, get its VP and   find that it is accredited to audit mining companies by the London Metal   Exchange according to one of its mining standards.   As the Importer knows about both the London Metal Exchange and the standard,   it can make a trust decision about the original Product Passport Verifiable   Credential.</li> </ul> <p>Such checks can all be done with a handful of HTTPS requests and the processing of the DIDs and verifiable presentations. If the system cannot automatically make a trust decision, lots of information has been quickly collected that can be passed to a person to make such a decision.</p> <p>The result is an efficient, verifiable, credential-based, decentralized, multi-domain trust registry, empowering individuals and organizations to verify the authenticity and legitimacy of DIDs. The convention promotes a decentralized trust model where trust is established through cryptographic verification rather than reliance on centralized authorities. By enabling anyone to access and validate the information associated with a DID, the \"/whois\" path contributes to the overall security and integrity of decentralized networks.</p>"},{"location":"demos/","title":"Trust DID Web (did:tdw) Demos","text":"<p>We'll be adding demos and tutorials to this section soon!</p> <p>Stay tuned!</p>"}]}